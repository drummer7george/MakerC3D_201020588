package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER,IGUAL,MAYORQ,MENORQ,MAYOR_IGUAL,MENOR_IGUAL,DIFERENTE,SOR,SAND,SNOT;
nonterminal NodoC3D inicial, expresion, logico, relacional;

precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT;
precedence left IGUAL,MAYORQ,MENORQ,MAYOR_IGUAL,MENOR_IGUAL,DIFERENTE;
precedence left SOR,SAND,SNOT;   

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logico:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("\n"+ exp.getEtv()+": EtiquetaVerdadera \n \n");
                        ControlC3D.agregarC3D( exp.getEtf()+": EtiquetaFalsa \n");
                        ControlC3D.agregarC3D("//Fin ");
                    :};

logico      ::= logico:izq SOR {:ControlC3D.agregarC3D(izq.getEtf() +": \n");:}logico:der
                    {:                        
                        RESULT = new NodoC3D("",izq.getEtv() +", "+ der.getEtv() ,  der.getEtf());
                    :}
            | logico:izq SAND {:ControlC3D.agregarC3D(izq.getEtv() +": \n");:} logico:der
                    {:
                        RESULT = new NodoC3D("",der.getEtv() , izq.getEtf() +", "+ der.getEtf());
                    :}
            | SNOT logico:log
                    {: 
                        RESULT = new NodoC3D("",log.getEtf(),log.getEtv()); 
                    :}
            | PAR_IZQ logico:log PAR_DER
                    {: RESULT = log; :}
            | relacional:rel
                    {: RESULT = rel; :};

relacional  ::= expresion:izq IGUAL expresion:der
                    {:
                        String etv = ControlC3D.generaEtTemp();
                        String etf = ControlC3D.generaEtTemp();
                        String c3d = " if " + izq.getCad() + " == " + der.getCad() + " then go to "+ etv + " ;\n";
                        c3d += " go to "+ etf + " ;\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",etv,etf);
                    :}
            | expresion:izq MAYORQ expresion:der
                    {:
                        String etv = ControlC3D.generaEtTemp();
                        String etf = ControlC3D.generaEtTemp();
                        String c3d = " if " + izq.getCad() + " > " + der.getCad() + " then go to "+ etv + " ;\n";
                        c3d += " go to "+ etf + " ;\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",etv,etf);
                    :}
            | expresion:izq MENORQ expresion:der
                    {:
                        String etv = ControlC3D.generaEtTemp();
                        String etf = ControlC3D.generaEtTemp();
                        String c3d = " if " + izq.getCad() + " < " + der.getCad() + " then go to "+ etv + " ;\n";
                        c3d += " go to "+ etf + " ;\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",etv,etf);
                    :}
            | expresion:izq MAYOR_IGUAL expresion:der
                    {:
                        String etv = ControlC3D.generaEtTemp();
                        String etf = ControlC3D.generaEtTemp();
                        String c3d = " if " + izq.getCad() + " >= " + der.getCad() + " then go to "+ etv + " ;\n";
                        c3d += " go to "+ etf + " ;\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",etv,etf);
                    :}
            | expresion:izq MENOR_IGUAL expresion:der
                    {:
                        String etv = ControlC3D.generaEtTemp();
                        String etf = ControlC3D.generaEtTemp();
                        String c3d = " if " + izq.getCad() + " <= " + der.getCad() + " then go to "+ etv + " ;\n";
                        c3d += " go to "+ etf + " ;\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",etv,etf);
                    :}
            | expresion:izq DIFERENTE expresion:der 
                    {:
                        String etv = ControlC3D.generaEtTemp();
                        String etf = ControlC3D.generaEtTemp();
                        String c3d = " if " + izq.getCad() + " != " + der.getCad() + " then go to "+ etv + " ;\n";
                        c3d += " go to "+ etf + " ;\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",etv,etf);
                    :};


expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,"",""); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,"",""); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,"",""); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,"",""); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,"",""); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,"",""); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id,"",""); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero,"",""); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal,"",""); :}
            ;